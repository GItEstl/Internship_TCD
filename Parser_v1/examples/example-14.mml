func void ThinkingPhilosophe(channel boolean fl, channel boolean fr) {
    choose {
        | tau -> {ThinkingPhilosophe(fl,fr)}
        | send(fl,true) -> {spawn WaitingPhilosophe(fl,fr,fr)}
        | send(fr,true) -> {spawn WaitingPhilosophe(fl,fr,fl)}
    }
}

func void WaitingPhilosophe (channel boolean fl, channel boolean fr, channel boolean MissingFork){
    choose {
        | send(MissingFork,true) -> {spawn EatingPhilosophe(fl,fr)}
    }
}

func void EatingPhilosophe (channel boolean fl, channel boolean fr) {
    choose {
        | tau -> {spawn EatingPhilosophe(fl,fr)}
        | send(fl,true) -> {spawn ThinkingPhilosophe(fl,fr)}
        | send(fr,true) -> {spawn ThinkingPhilosophe(fl,fr)}
    }
}

func void Fork (channel boolean philol, channel boolean philor){
def
    boolean take
in
    choose { 
        | take = receive(philol) -> {spawn NotFreeFork(philol,philor,philol)}
        | take = receive(philor) -> {spawn NotFreeFork(philol,philor,philor)}
    }
}

func void NotFreeFork (channel boolean philol, channel boolean philor, channel boolean philoWithFork) {
def
    boolean free
in
    choose {
        | tau -> {spawn NotFreeFork(philol,philor,philoWithFork)}
        | free = receive(philof) -> {spawn Fork(philol,philor)}
    } 
}

func void Table(int n){
def
    channel boolean fstPhiloLeftFork;
    channel boolean leftFork;
    channel boolean rightFork;
    int c
in
    c = 0;
    fstPhiloLeftFork = newChan();
    leftFork = fstPhiloLeftFork;
    rightFork = newChan();
    while (c < n - 1) {
        spawn ThinkingPhilosophe(leftFork,rightFork);
        leftFork = newChan();
        spawn Fork(rightFork,leftFork);
        rightFork = newChan();
    };
    spawn ThinkingPhilosophe(leftFork,rightFork);
    spawn Fork(rightFork,fstPhiloLeftFork)
}

start Table(8)





